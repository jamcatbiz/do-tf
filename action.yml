name: 'TF Action'
description: 'Assists in running various tf workflows from GitHub Actions.'
inputs:
  # REQUIRED
  tf_flavor:
    description: 'Which flavor of tf infra-as-code to use; `tofu` or `terraform`'
    type: string
    required: true
  dir_path:
    description: 'Path relative to root of repo for working tf dir.'
    type: string
    required: true
  vars:
    description: 'Path relative to working tf dir for `.tfvars` file.'
    type: string
    required: true
  backend:
    description: 'Path relative to working tf dir for `.tfbackend` file.'
    type: string
    required: true
  version:
    description: 'Version of the tf executable to install.'
    type: string
    required: true
  # OPTIONAL
  plan_only: 
    description: 'Boolean for whether to only plan and not apply/destroy, default false'
    type: boolean
    required: true
  destroy:
    description: 'Boolean for whether to destroy or not, default false, meaning this action will apply by default.'
    type: boolean
    required: true
  init_args:
    description: '[Optional] Additional command line args. Useful for --backend-config and ephemeral or dynamic deploys.'
    type: string
    required: false
    default: ''
  plan_args: 
    description: '[Optional] Additional command line args. Useful for --var-file and ephemeral or dynamic deploys.'
    type: string
    required: false
    default: ''
  plan_artifact_name:
    description: '[Optional] Artifact name for plan file to use. If passed, then we jump straight to apply.'
    type: string
    required: false
    default: ''
outputs:
  output:
    description: 'tf outputs in -json format.'
    value: ${{ steps.apply.outputs.output }}
runs:
  using: 'composite'
  steps:
  - if: ${{ inputs.tf_flavor != 'tofu' && inputs.tf_flavor != 'terraform' }}
    run: |
      echo "::error file='jamcatbiz/do-tf/action.yml',line=56,endLine=56,title='Invalid Input tf_flavor'::'Valid values for tf_flavor include tofu and terraform."
      exit 1
  - uses: actions/checkout@v4
  - uses: opentofu/setup-opentofu@v1
    if: ${{ inputs.tf_flavor == 'tofu' }}
    with:
      tofu_version: ${{ inputs.version }}
      tofu_wrapper: false
    uses: hashicorp/setup-terraform@v3
    if: ${{ inputs.tf_flavor == 'terraform' }}
    with:
      terraform_version: ${{ inputs.version }}
      terraform_wrapper: false
  - id: plan
    if: ${{ inputs.plan_artifact_name != '' }}
    run: |
      cd ${{ inputs.dir_path }}
      ${{ inputs.tf_flavor }} fmt -check -recursive
      ${{ inputs.tf_flavor }} init -input=false \
        -backend-config=${{ inputs.backend }} \
        ${{ inputs.init_args }}
      ${{ inputs.tf_flavor }} validate -no-color
      ${{ inputs.tf_flavor }} plan ${{ inputs.destroy && '-destroy' || '' }} \
        -no-color -input=false -out=tfplan \
        -var-file=${{ inputs.vars }} \
        ${{ inputs.plan_args }}
      ${{ inputs.tf_flavor }} show -no-color tfplan > tf.txt
      {
        echo "##### $(cat tf.txt | grep --color=never -E '^[[:punct:]]|Plan')"
        echo "<details><summary>:mag: Show Plan</summary>"
        echo ""
        echo "\`\`\`hcl"
        echo "$(cat tf.txt)"
        echo "\`\`\`"
        echo "</details>"
      } >> $GITHUB_STEP_SUMMARY
  - uses: actions/upload-artifact@v4
    if: ${{ inputs.plan_artifact_name != '' }}
    with:
      name: ${{ format('{0}-{1}-tfplan', inputs.dir_path, inputs.vars) }}
      path: ${{ inputs.dir_path }}/tfplan
      retention-days: 7
  - uses: actions/download-artifact@v4
    with:
      name: ${{ inputs.plan_artifact_name != '' && inputs.plan_artifact_name || format('{0}-{1}-tfplan', inputs.dir_path, inputs.vars) }}
      path: ${{ inputs.dir_path }}
  - id: apply
    run: |
      cd ${{ inputs.dir_path }}
      ${{ inputs.tf_flavor }} apply -no-color -input=false ${{ inputs.plan_artifact_name != '' && inputs.plan_artifact_name || format('{0}-{1}-tfplan', inputs.dir_path, inputs.vars) }}
      {
        echo 'output<<EOF'
        echo $(${{ inputs.tf_flavor }} output -json)
        echo 'EOF'
      } >> $GITHUB_OUTPUT
      {
        echo "|Name|Value|"
        echo "|:-:|:-:|"
        echo "$(${{ inputs.tf_flavor }} output -json | jq -r 'keys[] as $k | "|\`\($k)\`|\`\(.[$k].value)\`|"')"
      } >> $GITHUB_STEP_SUMMARY